## 1. Какие еще существуют коды типов?
'''
'f' — float (с плавающей запятой)
'd' — double (с двойной точностью)
'b' — byte (знаковые (со знаком) целые числа)
'B' — unsigned byte (беззнаковые целые числа)
'h' — short (короткие знаковые целые числа)
'H' — unsigned short (короткие беззнаковые целые числа)
'l' — long (длинные целые числа)
'L' — unsigned long (длинные беззнаковые целые числа)
'''

## 2. Напишите код, подобный приведенному выше, но с другим типом.
'''
a2 = array.array('b', [1, -2, 3])
print(sys.getsizeof(a2))
print(type(a2), type(-2))
'''

## 3. Напишите код для создания массива с 5 значениями, располагающимися через равные интервалы в диапазоне от 0 до 1
'''print(np.linspace(0, 1, 5))'''

## 4. Напишите код для создания массива с 5 равномерно распределенными случайными значениями в диапазоне от 0 до 1
'''print(np.random.uniform(0, 1, 5))'''

## 5. Напишите код для создания массива с 5 нормально распределенными случайными значениями с мат. ожиданием = 0 и дисперсией 1
'''print(np.random.normal(0, 1, 5))'''

## 6. Напишите код для создания массива с 5 случайнвми целыми числами в от [0, 10)
'''print(np.random.randint(0, 10, 5))'''

## 7. Написать код для создания срезов массива 3 на 4
'''
a = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12]])
'''
# - первые две строки и три столбца
'''print(a[:2, :3:])'''
# - первые три строки и второй столбец
'''print(a[:3, 1:2])'''
# - все строки и столбцы в обратном порядке
'''print(a[::-1, ::-1])'''
# - второй столбец
'''print(a[:, 1])'''
# - третья строка
'''print(a[2, :],' = ', a[2])'''

## 8. Продемонстрируйте, как сделать срез-копию
'''
a = np.array([1,2,3,4,5,6])
b = a[:3].copy() 
b[0] = 123
print(a, b)
'''

## 9. Продемонстрируйте использование newaxis для получения вектора-столбца и вектора-строки
'''
a = np.arange(6)
print(a[:, np.newaxis]) # столбец
print(a[np.newaxis, :]) # строка
'''

## 10. Разберитесь, как работает метод dstack
''' dstack склеивает в третьем измерении (по глубине), объединяя массивы в трехмерный'''
'''
x = np.array([1, 2, 3, 4])
y = np.array([5, 6, 7, 8])
print(np.dstack((x, y)))
print('\n')

x2 = np.array([[1, 2], [3, 4]])
y2 = np.array([[5, 6], [7, 8]])
print(np.dstack((x2, y2)))
'''

## 11. Разберитесь, как работают методы split, vsplit, hsplit, dsplit

# split разделяет массив на подмассивы вдоль заданной оси
'''
s = np.array([1, 2, 3, 4, 5, 6])
print(np.split(s, 2))
'''

# vsplit разделяет вертикально двумерные массивы (на строки)
'''
v = np.array([[1, 2],
              [3, 4],
              [5, 6]])
print(np.vsplit(v, 3))
'''

# hsplit разделяет горизонтально двумерные массивы (на столбцы)
'''
h = np.array([[1, 2, 3],
              [4, 5, 6]])
print(np.hsplit(h, 3))
'''

# dsplit разделяет трехмерные массивов по глубине
'''
d = np.array([[1, 2, 3], 
              [4, 5, 6], 
              [7, 8, 9], 
              [10, 11, 12]])
d = d.reshape(1, 2, 6)
print(d)
print(np.dsplit(d, 3))
'''

## 12. Привести пример использования всех универсальных функций, которые я привел
# - - / // ** %
'''
x = np.arange(10) 
print (x)

print(np.subtract(x, 5),' = ', x-5)  # вычитание
print(np.negative(x),' = ', -x)  # взятие отрицания
print(np.divide(x, 2),' = ', x/2)  # деление
print(np.floor_divide(x, 2),' = ', x//2)  # целочисленное деление
print(np.power(x, 2),' = ', x**2)  # возведение в степень
print(np.mod(x, 2),' = ', x%2)  # остаток от деления
'''